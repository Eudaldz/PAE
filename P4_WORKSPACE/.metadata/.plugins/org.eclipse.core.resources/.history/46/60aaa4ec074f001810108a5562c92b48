#include <msp432p401r.h>
#include <stdio.h>
#include <stdint.h>
#include "lib_PAE2.h" //Libreria grafica + configuracion reloj MSP432

typedef uint8_t byte;
#define TXD2_READY (UCA2IFG & UCTXIFG)

//==DIRECTION================
//===========================

#define RIGHT_FORWARD 1
#define RIGHT_BACKWARD 0
#define LEFT_FORWARD 1
#define LEFT_BACKWARD 0

//===========================
//===========================

//==========IDS==============
//===========================

#define LEFT_ACTUATOR 2
#define RIGHT_ACTUATOR 3
#define SENSOR 4

//===========================
//===========================



//==INSTRUCTIONS=============
//===========================

#define PING 1
#define READ 2
#define WRITE 3
#define REG_WRITE 4
#define ACTION 5
#define RESET 6

//==========================
//==========================



//==SPEEDS==================
//==========================
#define MIN_SPEED 1
#define LOW_SPEED 100
#define NORMAL_SPEED 300
#define HIGH_SPEED 500
#define MAX_SPEED 1023

//==========================
//==========================

//TIEMPO MAXIMO DE LECTURA
#define READ_TIME_OUT 2000


#define EMPTY_LINE "               "
#define OVERWRITE_TEXT 1

// TIMER A0 counter
uint32_t timer = 0;

byte leftActuator = LEFT_ACTUATOR;
byte rightActuator = RIGHT_ACTUATOR;
byte sensor = SENSOR;



//Input/Output packet
typedef struct DataPacket{
    byte id;
    byte parameterLength;
    byte instruction;
    byte parameter[32];
}DataPacket;

//Read buffer.
struct{
    byte data[128];
    byte index;
}readBuffer;


typedef struct SensorDetection{
    byte left;
    byte center;
    byte right;
}SensorDetection;

//LISTENER NOT IMPLEMENTED YET.
byte listenerSet = 0;
void (*onSensorDetectionChanged)(SensorDetection);


/**************************************************************************
 * NVIC Initialization
 **************************************************************************/
void init_interrupciones(){

    //timer A0
    NVIC->ICPR[0] |= BIT8;
    NVIC->ISER[0] |= BIT8;
    //UART
    NVIC->ICPR[0] |= 1<<18;
    NVIC->ISER[0] |= 1<<18;
    __enable_interrupt(); //Habilitamos las interrupciones a nivel global del micro.
}

/**************************************************************************
 * Create new empty DataPacket.
 **************************************************************************/

DataPacket newDataPacket(){
    DataPacket new;
    new.id = 0;
    new.parameterLength = 0;
    new.instruction = 0;
    byte i;
    for(i = 0; i<32; i++){
        new.parameter[i] = 0;
    }
    return new;
}

/**************************************************************************
 * LCD Screen initialization.
 **************************************************************************/
void init_LCD(void){
    halLcdInit(); //Inicializar y configurar la pantallita
    halLcdClearScreenBkg(); //Borrar la pantalla, rellenando con el color de fondo
}

/**************************************************************************
 * Clear text line from screen.
 **************************************************************************/

void borrar(uint8_t Linea){
    halLcdPrintLine(EMPTY_LINE, Linea, OVERWRITE_TEXT); //escribimos una linea en blanco
}

/**************************************************************************
 * Write text line in screen.
 **************************************************************************/
void escribir(char String[], uint8_t Linea){
    halLcdPrintLine(String, Linea, OVERWRITE_TEXT); //Enviamos la String al LCD, sobreescribiendo la Linea indicada.
}

/**************************************************************************
 * Timer A0 initialization.
 **************************************************************************/
void init_timers(void){
    //A0
    TA0CTL &= ~(BIT9 + BIT8); //Nos aseguramos que esten los bits a cero inicialmente para evitar posibles complicaciones
    TA0CTL &= ~(BIT4 + BIT5); //Nos aseguramos que esten los bits a cero inicialmente para evitar posibles complicaciones
    TA0CCTL0 &= ~CCIFG; // Interrupt pending
    TA0CTL |= TASSEL__SMCLK+MC__STOP; // Timer parado (No queremos que comience a contar desde un inicio)
    TA0CCTL0 |= CCIE; // Interrupt enabled
    TA0CCTL0 &= ~CAP; // Mode Compare
    TA0CCR0 = 24000; // Data para la comparacion del timer

}


/**************************************************************************
 * Uart initialization
 **************************************************************************/
void init_UART(void) {
    UCA2CTLW0 |= UCSWRST;       //Fem un reset de la USCI, desactiva la USCI
    UCA2CTLW0 |= UCSSEL__SMCLK; //UCSYNC=0 mode asíncron
                                //UCMODEx=0 seleccionem mode UART
                                //UCSPB=0 nomes 1 stop bit
                                //UC7BIT=0 8 bits de dades
                                //UCMSB=0 bit de menys pes primer
                                //UCPAR=x ja que no es fa servir bit de paritat
                                //UCPEN=0 sense bit de paritat
                                //Triem SMCLK (24MHz) com a font del clock BRCLK
    UCA2MCTLW = UCOS16; // Necessitem sobre-mostreig => bit 0 = UCOS16 = 1
    UCA2BRW = 3;    //Prescaler de BRCLK fixat a 3. Com SMCLK va a24MHz,
                    //volem un baud rate de 500kb/s i fem sobre-mostreig de 16
                    //el rellotge de la UART ha de ser de 8MHz (24MHz/3).
                    //Configurem els pins de la UART
    P3SEL0 |= BIT2 | BIT3; //I/O funció: P3.3 = UART2TX, P3.2 = UART2RX
    P3SEL1 &= ~ (BIT2 | BIT3);
            //Configurem pin de selecció del sentit de les dades Transmissió/Recepeció
    P3SEL0 &= ~BIT0; //Port P3.0 com GPIO
    P3SEL1 &= ~BIT0;
    P3DIR |= BIT0; //Port P3.0 com sortida (Data Direction selector Tx/Rx)
    P3OUT &= ~BIT0; //Inicialitzem Sentit Dades a 0 (Rx)
    UCA2CTLW0 &= ~UCSWRST; //Reactivem la línia de comunicacions sèrie
    UCA2IE |= UCRXIE; //
}


/****************************************************************************
 * Alternate communication direction.
 *****************************************************************************/

void Sentit_Dades_Rx(void) { //Configuració del Half Duplex dels motors: Recepció
    P3OUT &= ~BIT0; //El pin P3.0 (DIRECTION_PORT) el posem a 0 (Rx)
}
void Sentit_Dades_Tx(void) { //Configuració del Half Duplex dels motors: Transmissió
    P3OUT |= BIT0; //El pin P3.0 (DIRECTION_PORT) el posem a 1 (Tx)
}

/*******************************************************************************
 * Start/Stop timer.
 *******************************************************************************/

void setTimerActive(byte isActive){
    timer = 0;
    if(isActive)TA0CTL |= MC__UP;
    else TA0CTL &= ~MC__UP;
}

/**************************************************************************
 * Delay for -temps- miliseconds.
 **************************************************************************/
void delay_t (uint32_t temps){
    setTimerActive(1);
    while(timer < temps);
    setTimerActive(0);
}


/**************************************************************************
 * Blocks until readBuffer has -index- elements. Or timeout.
 **************************************************************************/
byte waitForReadBuffer(byte index){
    setTimerActive(1);
    while(readBuffer.index < index && timer < READ_TIME_OUT);
    uint32_t tmp = timer;
    setTimerActive(0);
    if(tmp < READ_TIME_OUT) return 0;
    return 1;
}

/**************************************************************************
 * Reads DataPacket from readBuffer. Waits for buffer to be completed.
 **************************************************************************/

DataPacket RxPacket(){

    DataPacket readPacket = newDataPacket();
    DataPacket error = newDataPacket();
    if(waitForReadBuffer(5))return error;

    if(readBuffer.data[0] != 0xFF && readBuffer.data[1] != 0xFF){
        return error;
    }

    readPacket.id = readBuffer.data[2];
    readPacket.parameterLength = readBuffer.data[3]-2;
    readPacket.instruction = readBuffer.data[4];

    if(waitForReadBuffer(6+readPacket.parameterLength))return error;

    byte i = 0;
    for(i = 0; i < readPacket.parameterLength; i++){
        readPacket.parameter[i] = readBuffer.data[i+5];
    }
    byte checkSum = readBuffer.data[i+5];
    byte check = readPacket.id+readPacket.parameterLength+2+readPacket.instruction;
    for(i = 0; i < readPacket.parameterLength; i++) { //Càlcul del checksum
        check += readPacket.parameter[i];
    }

    check = ~check;

    if(checkSum != check){
        return error;
    }

    readBuffer.index = 0;
    return readPacket;

}


/***************************************************************************************
 * Sends array of bytes to uca2.
 ****************************************************************************************/
void TxUAC2(byte* bTxdData, byte length) {
    Sentit_Dades_Tx();
    byte i;
    for(i = 0; i < length; i++){
        while(!TXD2_READY); // Espera a que estigui preparat el buffer de transmissió
        UCA2TXBUF = bTxdData[i];
    }
    while( (UCA2STATW&UCBUSY));
    Sentit_Dades_Rx();
}

/****************************************************************************************
 * Uses previous function to send a DataPacket to uca2.
 ****************************************************************************************/
void TxPacket(DataPacket dp) {
    if(dp.instruction == 0x03 && dp.parameter[0] <= 0x05)return;
    byte bCount,bCheckSum,bPacketLength;
    byte TxBuffer[32];
    TxBuffer[0] = 0xff; //Primers 2 bytes que indiquen inici de trama FF, FF.
    TxBuffer[1] = 0xff;
    TxBuffer[2] = dp.id; //ID del mòdul al que volem enviar el missatge
    TxBuffer[3] = dp.parameterLength+2; //Length(Parameter,Instruction,Checksum)
    TxBuffer[4] = dp.instruction; //Instrucció que enviem al Mòdul

    for(bCount = 0; bCount < dp.parameterLength; bCount++) { //Comencem a generar la trama que hem denviar
        TxBuffer[bCount+5] = dp.parameter[bCount];
    }

    bCheckSum = 0;
    bPacketLength = dp.parameterLength+4+2;
    for(bCount = 2; bCount < bPacketLength-1; bCount++) { //Càlcul del checksum
        bCheckSum += TxBuffer[bCount];
    }

    TxBuffer[bCount] = ~bCheckSum; //Escriu el Checksum (complement a 1)

    TxUAC2(TxBuffer, bCount+1);
}

/******************************************************************************************
 * Sugar function to send packet and retrieve answer.
 *******************************************************************************************/
DataPacket sendPacket(DataPacket dp){
    readBuffer.index = 0;
    TxPacket(dp);
    return RxPacket();
}

DataPacket moveActuatorPacket(byte id, uint16_t speed, byte sentido){
    speed = speed % (MAX_SPEED+1);
    DataPacket dp;
    dp.id = id;
    dp.parameterLength = 3;
    dp.instruction = 0x03;
    dp.parameter[0] = 0x20;
    dp.parameter[1] = (byte)speed;
    dp.parameter[2] = (byte)(speed>>8) + sentido<<2;
    return dp;
}

DataPacket pingPacket(byte id){
    DataPacket dp;
    dp.id = id;
    dp.parameterLength = 0x0;
    dp.instruction = 0x01;
    return dp;
}

DataPacket servoLedPacket(byte id, byte setActive){
    DataPacket dp;
    dp.id = id;
    dp.parameterLength = 2;
    dp.instruction = 0x03;
    dp.parameter[0] = 0x19;
    dp.parameter[1] = 0x01;
    return dp;
}

DataPacket doPing(byte id){
    return sendPacket(pingPacket(id));
}

DataPacket sensorCmpValue(uint16_t value){
    DataPacket dp;
    dp.id = sensor;
    dp.parameterLength = 3;
    dp.instruction = 0x03;
    dp.parameter[0] = 0x14;
    dp.parameter[1] = (byte)value;
    dp.parameter[2] = (byte)(value>>8);
    return dp;
}

DataPacket sensorDetectionFlag(){
    DataPacket dp;
    dp.id = sensor;
    dp.parameterLength = 2;
    dp.instruction = 0x02;
    dp.parameter[0] = 0x20;
    dp.parameter[1] = 0x01;
    return dp;
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/******************************************************************************************************
*        PUBLIC LIBRARY
*
*********************************************************************************************************/

void moveLeft(int16_t speed){
    byte direction;
    if(speed >= 0){
        direction = LEFT_FORWARD;
        speed = speed > MAX_SPEED ? MAX_SPEED : speed;
    }else{
        direction = LEFT_BACKWARD;
        speed = speed < -MAX_SPEED ? MAX_SPEED : -speed;
    }
    sendPacket(moveActuatorPacket(leftActuator, speed, direction));
}

void moveRight(int16_t speed){
    byte direction;
    if(speed >= 0){
        direction = RIGHT_FORWARD;
        speed = speed > MAX_SPEED ? MAX_SPEED : speed;
    }else{
        direction = RIGHT_BACKWARD;
        speed = speed < -MAX_SPEED ? MAX_SPEED : -speed;
    }
    sendPacket(moveActuatorPacket(rightActuator, speed, direction));
}

void moveForward(int16_t speed){
    speed = speed > 0 ? (speed > MAX_SPEED ? MAX_SPEED : speed) : 0;
    sendPacket(moveActuatorPacket(leftActuator, speed, LEFT_FORWARD));
    sendPacket(moveActuatorPacket(rightActuator, speed, RIGHT_FORWARD));
}

void moveBackward(int16_t speed){
    speed = speed > 0 ? (speed > MAX_SPEED ? MAX_SPEED : speed) : 0;
    sendPacket(moveActuatorPacket(leftActuator, speed, LEFT_BACKWARD));
    sendPacket(moveActuatorPacket(rightActuator, speed, RIGHT_BACKWARD));
}

void turnLeft(int16_t speed){
    speed = speed > 0 ? (speed > MAX_SPEED ? MAX_SPEED : speed) : 0;
    sendPacket(moveActuatorPacket(leftActuator, speed, LEFT_BACKWARD));
    sendPacket(moveActuatorPacket(rightActuator, speed, RIGHT_FORWARD));
}

void turnRight(int16_t speed){
    speed = speed > 0 ? (speed > MAX_SPEED ? MAX_SPEED : speed) : 0;
    sendPacket(moveActuatorPacket(leftActuator, speed, LEFT_FORWARD));
    sendPacket(moveActuatorPacket(rightActuator, speed, RIGHT_BACKWARD));
}

void stop(){
    sendPacket(moveActuatorPacket(leftActuator, 0, FORWARD_LEFT));
    sendPacket(moveActuatorPacket(rightActuator, 0, FORWARD_RIGHT));
}


void setSensorDetectValue(uint16_t value){
    sendPacket(sensorCmpValue(value));
}

SensorDetection getSensorDetectionFlag(){
    DataPacket answer = sendPacket(sensorDetectionFlag());
    uint16_t value = answer.parameter[0];
    SensorDetection result;
    result.left = value&1;
    result.center = value&2;
    result.right = value&4;
    return result;
}

void setOnSensorDetectionChanged( void onDetection(SensorDetection) ){
    onSensorDetectionChanged = onDetection;
    listenerSet = 1;
}

void initializeController(){
    WDT_A->CTL = WDT_A_CTL_PW | WDT_A_CTL_HOLD;
    init_ucs_24MHz();
    init_interrupciones();
    init_timers();
    init_LCD();
    init_UART();
    setInterruptionActive(1);
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



/**************************************************************************
 * RUTINAS DE GESTION DE LOS BOTONES:
 * Mediante estas rutinas, se detectará qué botón se ha pulsado
 *
 * Sin Datos de entrada
 *
 * Sin datos de salida
 *
 * Actualizar el valor de la variable global estado
 *
 **************************************************************************/

//ISR para las interrupciones del Timer A0 (Apartado 1 de la practica):
void TA0_0_IRQHandler(void){
    TA0CCTL0 &= ~CCIE; // Interrupt disabled
    TA0CCTL0 &= ~CCIFG; // No interrupt pending
    timer += 1; // Aumentamos el valor del contador del timer
    TA0CCTL0 |= CCIE; // Interrupt enabled
}



void EUSCIA2_IRQHandler(void) { //interrupcion de recepcion en la UART A2
    UCA2IE &= ~UCRXIE; //Interrupciones desactivadas en RX
    readData.data[readData.index] = UCA2RXBUF;
    readData.index = readData.index + 1;
    UCA2IE |= UCRXIE; //Interrupciones reactivadas en RX
}
